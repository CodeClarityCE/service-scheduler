# syntax=docker/dockerfile:1

ARG KIND=services
ARG USERNAME=codeclarity
ARG PLUGINNAME=scheduler

# DEV IMAGE
FROM golang:1.24.5-alpine AS plugin-dev
ARG KIND
ARG PLUGINNAME
WORKDIR /codeclarity/${KIND}/${PLUGINNAME}
ADD .cloud/docker/config/* /root
RUN apk add git
RUN go install github.com/air-verse/air@latest
CMD ["air", "-c", ".air.toml"]

# DEBUG IMAGE
FROM golang:1.24.5-alpine AS plugin-debug
ARG KIND
ARG PLUGINNAME
ENV KIND=${KIND}
ENV PLUGINNAME=${PLUGINNAME}
RUN apk add git
RUN go install github.com/go-delve/delve/cmd/dlv@latest
ADD .cloud/docker/config/* /root
WORKDIR /codeclarity/${KIND}/${PLUGINNAME}
CMD ["/go/bin/dlv", "debug", ".", "--headless", "--listen=:40000", "--accept-multiclient"]
# CMD tail -f /dev/null


# BUILD IMAGE
FROM golang:1.24.5-alpine AS plugin-build
ARG KIND
ARG PLUGINNAME
COPY . /codeclarity/${KIND}/${PLUGINNAME}
WORKDIR /codeclarity/${KIND}/${PLUGINNAME}
ADD .cloud/docker/config/* /root
RUN rm -f go.work
RUN apk update && apk upgrade --no-cache
RUN apk add git
RUN [ "go", "build", "-o", "scheduler" ]

# PRODUCTION IMAGE
FROM alpine:3.22.1 AS plugin
ARG KIND
ARG USERNAME
ARG PLUGINNAME
RUN adduser -D ${USERNAME}
USER ${USERNAME}
WORKDIR /home/${USERNAME}/${PLUGINNAME}
COPY --from=plugin-build --chown=codeclarity:codeclarity /codeclarity/${KIND}/${PLUGINNAME}/scheduler .
COPY --from=plugin-build --chown=codeclarity:codeclarity /codeclarity/${KIND}/${PLUGINNAME}/config.json .

RUN mkdir /home/${USERNAME}/private

ENTRYPOINT [ "./scheduler" ]